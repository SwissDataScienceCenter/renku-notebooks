---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "notebooks.fullname" . }}-options
  labels:
    app: {{ template "notebooks.name" . }}
    chart: {{ template "notebooks.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  server_options.json: |
    {{ .Values.serverOptions | default dict | toJson }}
  server_defaults.json: |
    {{ toJson .Values.serverDefaults }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "notebooks.fullname" . }}-config
  labels:
    app: {{ template "notebooks.name" . }}
    chart: {{ template "notebooks.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  config.hocon: |
    amalthea {
      group = "{{ .Values.amalthea.crdApiGroup }}"
      version = "{{ .Values.amalthea.crdApiVersion }}"
      plural = "{{ .Values.amalthea.crdNames.plural }}"
    }  
    anonymous_sessions_enabled = {{ .Values.global.anonymousSessions.enabled }}
    git {
      {{- if .Values.gitlab.url }}
        url = "{{ .Values.gitlab.url }}"
      {{- else }}
        url = "{{ template "notebooks.http" . }}://{{ .Values.global.renku.domain}}{{ .Values.global.gitlab.urlPrefix }}"
      {{- end }}
      registry = "{{ required "An image registry must be specified." .Values.gitlab.registry.host }}"
    }
    sentry {
      enabled = {{ .Values.sentry.enabled }}
      dsn = "{{ .Values.sentry.dsn }}"
      env = "{{ .Values.sentry.environment }}"
      sample_rate = {{ .Values.sentry.sampleRate }}
    }
    server_options {
      defaults_path = /etc/renku-notebooks/server_options/server_defaults.json
      ui_choices_path = /etc/renku-notebooks/server_options/server_options.json
    }
    sessions {
      affinity = """
        {{- toYaml .Values.sessionAffinity | nindent 8 }}
      """
      autosave_minimum_lfs_file_size_bytes = {{ .Values.sessionAutosave.minimumLFSFileSizeBytes }}
      ca_certs {
        image = "{{ .Values.global.certificates.image.repository }}:{{ .Values.global.certificates.image.tag }}"
        secrets = """
          {{- toYaml .Values.global.certificates.customCAs | nindent 10 }}
        """
      }
      culling {
        registered {
          idle_seconds = {{ .Values.culling.idleThresholdSeconds.registered }}
          max_age_seconds = {{ .Values.culling.maxAgeSecondsThreshold.registered }}
        }
        anonymous {
          idle_seconds = {{ .Values.culling.idleThresholdSeconds.anonymous }}
          max_age_seconds = {{ .Values.culling.maxAgeSecondsThreshold.anonymous }}
        }
      }
      default_image = "{{ .Values.defaultSessionImage }}"
      enforce_cpu_limits = {{ .Values.enforceCPULimits }}
      git_clone {
        image = "{{ .Values.gitClone.image.name }}:{{ .Values.gitClone.image.tag }}"
        sentry {
          enabled = {{ .Values.sessionSentry.gitClone.enabled }}
          dsn = "{{ .Values.sessionSentry.gitClone.dsn }}"
          env = "{{ .Values.sessionSentry.gitClone.environment }}"
          sample_rate = {{ .Values.sessionSentry.gitClone.sampleRate }}
        }
      }
      git_rpc_server {
        image = "{{ .Values.gitRpcServer.image.name }}:{{ .Values.gitRpcServer.image.tag }}"
        sentry {
          enabled = {{ .Values.sessionSentry.sidecar.enabled }}
          dsn = "{{ .Values.sessionSentry.sidecar.dsn }}"
          env = "{{ .Values.sessionSentry.sidecar.environment }}"
          sample_rate = {{ .Values.sessionSentry.sidecar.sampleRate }}
        }
      }
      git_proxy {
        image = "{{ .Values.gitHttpsProxy.image.name }}:{{ .Values.gitHttpsProxy.image.tag }}"
      }
      ingress {
        host = "{{ .Values.sessionIngress.host }}"
        tls_secret = {{ .Values.sessionIngress.tlsSecret }}
        annotations = """
          {{- toYaml .Values.sessionIngress.annotations | nindent 10 }}
        """
      }
      node_selector = """
        {{- toYaml .Values.sessionNodeSelector | nindent 8 }}
      """
      oidc {
        client_id = "{{ .Values.oidc.clientId }}"
        client_secret = "{{ .Values.oidc.clientSecret }}"
        auth_url = "{{ .Values.oidc.authUrl }}"
        token_url = "{{ .Values.oidc.tokenUrl }}"
        allow_unverified_email = {{ .Values.oidc.allowUnverifiedEmail }}
      }
      storage {
        pvs_enabled = {{ .Values.userSessionPersistentVolumes.storageClass }}
        {{- if .Values.userSessionPersistentVolumes.enabled }}
        pvs_storage_class = "{{ .Values.userSessionPersistentVolumes.storageClass }}"
        {{- end }}
        use_empty_dir_size_limit = {{ .Values.userSessionPersistentVolumes.useEmptyDirSizeLimit }}
      }
      termination_grace_period_seconds = {{ .Values.sessionAutosave.terminationGracePeriodSeconds }}
      tolerations = """
        {{- toYaml .Values.sessionTolerations | nindent 8 }}
      """
    }
    s3_mounts_enabled = {{ .Values.cloudstorage.s3.enabled }}
    version = "{{ .Values.image.tag }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notebook-helper-scripts
  labels:
    app: {{ template "notebooks.name" . }}
    chart: {{ template "notebooks.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  pre-stop.sh: |
    #!/bin/bash
    UNCOMMITTED_CHANGES=`git status -s`
    UNPUSHED_COMMITS=`git log --branches --not --remotes`
    if [ "${GIT_AUTOSAVE}" != "1" ] ; then
      exit 0
    fi
    if [ -z "$UNCOMMITTED_CHANGES" ] && [ -z "$UNPUSHED_COMMITS" ]; then
      exit 0
    fi
    CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`
    LOCAL_SHA=`git rev-parse --short HEAD`
    INITIAL_SHA="${CI_COMMIT_SHA:0:7}"
    AUTOSAVE_BRANCH="renku/autosave/$RENKU_USERNAME/${CURRENT_BRANCH}/${INITIAL_SHA}/${LOCAL_SHA}"
    if [ -z "$UNCOMMITTED_CHANGES" ] && [ ! -z "$UNPUSHED_COMMITS" ]; then
      # there are only unpushed commits
      git checkout -b "$AUTOSAVE_BRANCH"
      git push origin "$AUTOSAVE_BRANCH"
      git checkout "$CURRENT_BRANCH"
      git branch -D "$AUTOSAVE_BRANCH"
    fi
    if [ ! -z "$UNCOMMITTED_CHANGES" ]; then
      # there are uncommitted changes
      git stash --include-untracked
      git checkout -b "$AUTOSAVE_BRANCH"
      git stash apply
      git add .
      git commit -am "Auto-saving for $RENKU_USERNAME on branch $CURRENT_BRANCH from commit $INITIAL_SHA"
      git push origin "$AUTOSAVE_BRANCH"
      git checkout "$CURRENT_BRANCH"
      git branch -D "$AUTOSAVE_BRANCH"
      git stash pop
    fi
